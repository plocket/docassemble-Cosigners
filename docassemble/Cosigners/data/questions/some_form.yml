---
# TODO: Explore new `session_local`, etc. features
---
include:
  - sign_on_device.yml
  - signer.yml
  - docassemble.MAVirtualCourt:basic-questions.yml
---
metadata:
  title: Cosigners
---
mandatory: True
code: |
  multi_user = True
---
modules:
  - docassemble.base.util
  - docassemble.VirtualCourtToolbox.misc
---
objects:
  - codefendants: PeopleList.using(complete_attribute='complete')
---
comment: |
  Predefine some variables we need
code: |
  interview_short_title = 'Cosigners'  # Will be easier to switch to basic questions in future. Can be moved into its own block.
  allowed_courts = [
    "Housing Court",    
    "Boston Municipal Court",
    "District Court",
    "Superior Court",
  ]
  preferred_court = "Housing Court"
  #other_parties.there_are_any = True
  user_role = 'defendant'
  interview_presets = True
---
mandatory: True
id: interview order
code: |
  interview_presets
  
  # Skipping for speeding up tests
  #users[0].name.first = 'd'
  #users[0].name.last = 'd'
  #codefendants[0].name.first = 'c'
  #codefendants[1].name.first = 'f'
  #codefendants[2].name.first = 's'
  #preview_screen = True
  
  # Real code
  users[0].name.first
  users[0].mobile_number
  users.gathered = True
  users.there_is_another = False
  
  codefendants.gather()
  # Set signers that will sign on this device or not
  collect_signer_types # It would be nice if this didn't have to be in here
  
  preview_screen  # Must define form_to_sign
  users[0].sign_on_device
---
# Needed for cosigner functionality
code: |
  codefendants[i].get_signature_info
  codefendants[i].complete = True
---
# Needed for cosigner functionality
code: |
  cosigners = codefendants
  all_signers = users + cosigners
---
# After the user signs, the links for the co-signers get sent
event: x.after_signature
generic object: Individual
code: |
  get_cosigner_signatures
  users[0].status
---
#### Basic questions
id: do you have codefendants
question: |
  Is anyone filing with you?
fields:
  - no label: codefendants.there_are_any
    datatype: radio
    choices:
      - I am filing this motion alone: False
      - I talked to them and at least one of them wants to file with me: True
---
#### Basic questions
id: codefendants
question: |
  Is anyone else filing this motion with you?  
subquestion: |
  % if len(codefendants.elements) > 0:
  You already told us about ${comma_and_list(set(codefendants.elements))}
  % endif
yesno: codefendants.there_is_another
---
#### There may already be a basic question for this
id: cosigner names
reconsider: cosigners
generic object: PeopleList
question: |
  % if i == 0:
  What is your cosigner's name?
  % else:
  What is your ${ ordinal(i) } cosigner's name?
  % endif
fields:
  - First Name: x[i].name.first
  - Middle Name: x[i].name.middle
    required: False
  - Last Name: x[i].name.last
  - Suffix: x[i].name.suffix
    code: |
      name_suffix()
    required: False
---
id: preview
reconsider:
  - form_to_sign
question: |
  Preview your document
subquestion: |

  Tap the document below to open it in a new window.
  
  Use the "Back" button to find the screen to fix mistakes.
  
  ${ form_to_sign }
continue button field: preview_screen
---
code: |
  form_to_sign = pdf_concatenate(preview_doc, filename="unsigned-signatures-doc.pdf")
  # TODO: Discuss if this should always be set or not
  form_to_sign.set_attributes(private=False, persistent=True)
---
attachment:
  docx template file: test_signatures.docx
  variable name: preview_doc
---
reconsider:
  - signatures_doc
code: |
  final_form = pdf_concatenate(signatures_doc, filename="final-signatures-doc.pdf")
  final_form.set_attributes(private=False, persistent=True)
---
attachment: 
  docx template file: test_signatures.docx
  variable name: signatures_doc  
  filename: signatures-doc
  name: All signatures
---
####
# Only triggered for signers who user is signing for.
# Using intrinsic names is not enough.
id: proxy signature
generic object: Individual
if: |
  x in who_proxy_sign_for
question: |
  Sign ${ x }'s name
signature: x.signature
under: |
  ${ x }
progress: 99
---
#######################
# Interface with redis handler
#######################
---
code: |
  # When the saved redis data will expire: days * hours * minutes * seconds
  # https://docassemble.org/docs/objects.html#DARedis
  remote_siganure_expiration_ms = 1 * 24 * 60 * 60  # 1 day
---
# Must come from an `action`. Needed for security.
event: check_status
code: |
  if action_argument('party_id') == users[0].id:
    users[0].status
  else:
    unauthorized
---
id: 404
event: unauthorized
code: |
  response('Page not found', response_code=404)
---
######################
# Interfacing with code to let user choose which device to sign on
######################
---
####**
generic object: Individual
code: |
  # TODO: Should this be in sign_on_device.yml?
  if defined( x.attr_name( 'device_number' )):
    x.message_result = send_sms(task='send link to other device', to=x.device_number, template=x.sms_device_template)
  x.send_signature_link = True  # Used by sign_on_device.yml
---
####**
generic object: Individual
template: x.sms_device_template
content: |
  ${ x.familiar() }, tap the link to sign your document. ${ device_choice_url }
---
####?
generic object: Individual
code: |
  # `action` experiments for true device choice begin here
  long_device_choice_url = interview_url_action( 'signature_with_device_choice', device_id='tbd', signature_data_id=signature_data_id, party_id=x.id )
  device_choice_url = shortenMe( long_device_choice_url ).shortenedURL
---
####?
# Triggered by new device
event: signature_with_device_choice
code: |
  users[0].sign_on_device
---
#################
# Interview-specific UI
#################
---
####
id: check all signed
reconsider:
  - get_stored_data
  - collect_signer_types
# Is requested when people check on the status of the signatures
code: |
  # Statuses: sent, signed, unwilling, physical
  for cos in all_digital_cosigners:
    if not defined( cos.attr_name( 'signature' )):
      all_signatures_in = False
      break
  else:
    #trigger_final_notification
    all_signatures_in = True
  get_status_of_signatures = True
---
# Each variable is a chunk of text. Be aware of the `if` statements and move things around as you see fit.
id: signature status and download
event: users[0].status
reconsider:
  - get_stored_data
  - collect_signer_types
  - unwilling_cosigners
  - all_signatures_in
  - signatures_doc
  - final_form
question: |
  % if all_signatures_in:
  Your document is ready
  % else:
  Some people still need to sign your document
  % endif
subquestion: |

  ${ cosigner_status_section }

buttons:
  - Restart: restart
  
attachment code: signatures_doc
---
# Edit below to change the contents of the status page
---
####
template: cosigner_status_section
reconsider:
  - get_stored_data
  - collect_signer_types
  - unwilling_cosigners
content: |
  
  % if all_signatures_in:
    ${ every_digital_signature_in_template }
    
  % else:
  
    % if len( unwilling_cosigners ) > 0:
    ${ unwilling_list_template }

    ${ unwilling_instructions }
    <hr/>
    % endif

    ${ waiting_list_template }

    ${ signed_list_template }
  
  % endif
  
  ${ paper_signature_list_template }
  
  % if len( remote_signers ) > 0:
  ${ action_button_html('javascript:daShowSpinner();daRefreshSubmit()', label='Check again <i class="fas fa-sync-alt"></i>', size='md') }
  % endif

  % if codefendants.number() > 0:
  <hr/>
  % endif
---
####
template: every_digital_signature_in_template
content: |
  % if len( all_digital_cosigners ) > 1:
  :check: ${ comma_and_list( all_digital_cosigners )} have signed.
  % elif len( all_digital_cosigners ) > 0:
  :check: ${ all_digital_cosigners[0] } has signed.
  % endif
---
####
template: unwilling_list_template
content: |
  % for signer in unwilling_cosigners:
  :times: ${ signer } refused to sign your motion. We sent 
  it to ${ signer } at **${ signer.signature_message_endpoint }**.[BR]
  % endfor
---
####
template: unwilling_instructions
content: |
  % if len( unwilling_cosigners ) > 1:
  **You do not need ${ comma_and_list([str(person) + "'s" for person in unwilling_cosigners]) } signatures
  to file the motion. You can:**

  * Download and file the document. You can ask
  ${ comma_and_list(unwilling_cosigners) } to sign the paper
  copy. If they do not sign the paper copy, you can cross out their
  names and file it anyway. **Or,**
  * Start the interview again. Use the 'Restart'
  button. You can leave out ${ comma_and_list(unwilling_cosigners) }. **Or,**
  * You can file the document as it is.
  
  % elif len( unwilling_cosigners ) > 0:
  **You do not need ${ unwilling_cosigners[0] }'s signature
  to file the document. You can:**

  * Download and file the document. You can ask
  ${ unwilling_cosigners[0] } to sign the paper
  copy. If they do not sign the paper copy, you can cross out their
  name and file it anyway. **Or,**
  * Start the interview again. Use the 'Restart'
  button. You can leave out ${ unwilling_cosigners[0] }. **Or,**
  * You can file the document as it is.
  
  % endif
---
####
template: waiting_list_template
content: |
  % for signer in remote_signers:
  % if not hasattr(signer, 'signature') and (not hasattr(signer,'willing_to_sign') or not signer.willing_to_sign is False):
  :envelope: You sent a message to ${ signer } at
  ${ signer.signature_message_endpoint } to sign the
  document. They have not signed yet.[BR]
  % endif
  % endfor
---
####
template: signed_list_template
content: |
  % for signer in codefendants:
  % if hasattr(signer, 'signature'):
  :check: ${ signer } has signed[BR]
  % endif
  % endfor
---
####
template: paper_signature_list_template
content: |
  % if len( who_sign_with_pen ) > 0:
  :pen-alt: ${ comma_and_list( who_sign_with_pen ) } will sign on the document when you print it.
  % endif

#  % for signer in who_sign_with_pen:
#  :pen-alt: ${ signer } will sign on the document when you print it.[BR]
#  % endfor
---
####
# `template` so it gets recalculated each time (I think)
# Separate so it can be reused and the text for it can be easily edited.
generic object: Individual
template: x.signature_message_endpoint
content: |
  ${ x.signature_email if x.send_method == "email" else x.signature_number }
---
